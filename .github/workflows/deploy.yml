name: Deploy Lambda with CloudFormation

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
        id: setup-python

      - name: Install AWS CLI
        run: |
          pip install awscli

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsRole
          aws-region: us-east-1

      - name: Determine latest Lambda Python runtime
        run: |
          # List of known Lambda Python runtimes (as of June 2025, update as needed)
          KNOWN_RUNTIMES=("python3.8" "python3.9" "python3.10" "python3.11" "python3.12" "python3.13")
          
          # Get the latest Python version available in GitHub Actions
          PYTHON_VERSION=$(python --version | cut -d' ' -f2)
          PYTHON_MAJOR_MINOR=$(echo $PYTHON_VERSION | cut -d'.' -f1-2)
          GITHUB_LATEST="python${PYTHON_MAJOR_MINOR}"
          
          # Select the latest runtime supported by Lambda
          LAMBDA_RUNTIME=""
          for runtime in "${KNOWN_RUNTIMES[@]}"; do
            if [[ "$runtime" == "$GITHUB_LATEST" || "${runtime#python}" < "${GITHUB_LATEST#python}" ]]; then
              LAMBDA_RUNTIME="$runtime"
            fi
          done
          
          # If no match found, use the latest known Lambda runtime
          if [ -z "$LAMBDA_RUNTIME" ]; then
            LAMBDA_RUNTIME="python3.13"  # Latest known as of June 2025
          fi
          
          echo "Detected GitHub Actions Python version: $PYTHON_VERSION"
          echo "Selected Lambda runtime: $LAMBDA_RUNTIME"
          echo "LAMBDA_RUNTIME=$LAMBDA_RUNTIME" >> $GITHUB_ENV

      - name: Create S3 bucket
        run: |
          BUCKET_NAME="crypto-autobuy-lambdas-${{ secrets.AWS_ACCOUNT_ID }}"
          if aws s3 ls "s3://$BUCKET_NAME" 2>&1 | grep -q 'NoSuchBucket'; then
            echo "Creating S3 bucket $BUCKET_NAME..."
            aws s3 mb "s3://$BUCKET_NAME" --region us-east-1
          else
            echo "Bucket $BUCKET_NAME already exists."
          fi

      - name: Empty S3 bucket
        run: |
          BUCKET_NAME="crypto-autobuy-lambdas-${{ secrets.AWS_ACCOUNT_ID }}"
          echo "Emptying S3 bucket $BUCKET_NAME..."
          aws s3 rm "s3://$BUCKET_NAME" --recursive
          echo "Bucket $BUCKET_NAME emptied."

      - name: Generate version
        run: |
          echo "VERSION=$(date +%s)" >> $GITHUB_ENV

      - name: Package Lambda functions
        run: |
          LAMBDA_DIRS=("convert-gusd" "manual-buy-btc" "manual-buy-eth" "recurring-buy-btc" "recurring-buy-eth" "manual-sell-btc" "manual-sell-eth" "stake-eth")
          VERSION=${{ env.VERSION }}
          mkdir -p dist
          for dir in "${LAMBDA_DIRS[@]}"; do
            echo "Processing $dir..."
            if [ -d "$dir" ]; then
              cd "$dir"
              # Debug: List files before installation
              echo "Files before installation:"
              ls -la
              # Install additional dependencies from requirements.txt
              if [ -f "requirements.txt" ]; then
                echo "Installing dependencies from requirements.txt..."
                pip install -r requirements.txt -t .
                # Debug: List files after installation
                echo "Files after installation:"
                ls -la | grep -E "requests|__pycache__"
              else
                echo "No requirements.txt found in $dir"
              fi
              # Verify shared directory exists at root
              if [ ! -d "../shared" ]; then
                echo "shared directory not found at root!"
                exit 1
              fi
              # Zip the contents with a versioned name, including the root shared/ directory
              echo "Zipping contents..."
              zip -r "../dist/${dir}-${VERSION}.zip" . ../shared
              # Debug: List zip contents
              unzip -l "../dist/${dir}-${VERSION}.zip"
              cd ..
              echo "Packaged $dir into dist/${dir}-${VERSION}.zip"
            else
              echo "Directory $dir does not exist. Skipping..."
            fi
          done

      - name: Upload Lambda code to S3
        run: |
          BUCKET_NAME="crypto-autobuy-lambdas-${{ secrets.AWS_ACCOUNT_ID }}"
          VERSION=${{ env.VERSION }}
          for dir in convert-gusd manual-buy-btc manual-buy-eth recurring-buy-btc recurring-buy-eth manual-sell-btc manual-sell-eth stake-eth; do
            aws s3 cp "dist/${dir}-${VERSION}.zip" "s3://$BUCKET_NAME/${dir}-${VERSION}.zip"
            echo "Uploaded ${dir}-${VERSION}.zip to S3"
          done

      - name: Deploy CloudFormation stack
        run: |
          BUCKET_NAME="crypto-autobuy-lambdas-${{ secrets.AWS_ACCOUNT_ID }}"
          VERSION=${{ env.VERSION }}
          aws cloudformation deploy \
            --template-file template.yml \
            --stack-name CryptoAutobuyLambdasStack \
            --capabilities CAPABILITY_IAM \
            --parameter-overrides \
              CodeBucket="$BUCKET_NAME" \
              LambdaRuntime="${{ env.LAMBDA_RUNTIME }}" \
              ConvertGUSDCodeKey="convert-gusd-${VERSION}.zip" \
              ManualBuyBTCCodeKey="manual-buy-btc-${VERSION}.zip" \
              ManualBuyETHCodeKey="manual-buy-eth-${VERSION}.zip" \
              RecurringBuyBTCCodeKey="recurring-buy-btc-${VERSION}.zip" \
              RecurringBuyETHCodeKey="recurring-buy-eth-${VERSION}.zip" \
              ManualSellBTCCodeKey="manual-sell-btc-${VERSION}.zip" \
              ManualSellETHCodeKey="manual-sell-eth-${VERSION}.zip" \
              StakeETHCodeKey="stake-eth-${VERSION}.zip"