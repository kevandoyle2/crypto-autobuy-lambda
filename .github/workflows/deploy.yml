name: Deploy Lambda with CloudFormation

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history to avoid sparse checkout

      - name: Validate expected directories
        run: |
          echo "Validating expected directories:"
          for dir in recurring-buy-btc recurring-buy-eth; do
            if [ -d "$dir" ]; then
              echo "Found $dir"
              ls -la "$dir"
            else
              echo "ERROR: Directory $dir does not exist!"
              exit 1
            fi
          done

      - name: Debug repository contents
        run: |
          echo "Current working directory:"
          pwd
          echo "Listing repository root contents:"
          ls -la
          echo "Recursive directory listing:"
          find . -maxdepth 2
          echo "Git status:"
          git status
          echo "Checking recurring-buy-eth directory (case-sensitive):"
          if [ -d "recurring-buy-eth" ]; then
            ls -la recurring-buy-eth
            echo "Contents of recurring-buy-eth/function.py:"
            cat recurring-buy-eth/function.py || echo "function.py not found"
            echo "Contents of recurring-buy-eth/requirements.txt:"
            cat recurring-buy-eth/requirements.txt || echo "requirements.txt not found"
          else
            echo "recurring-buy-eth directory not found!"
            echo "Checking for case variants:"
            ls -la | grep -i "recurring-buy-eth" || echo "No case variants found"
            echo "Checking all directories:"
            find . -type d -iname "*recurring-buy-eth*"
          fi
          echo "Checking recurring-buy-btc directory:"
          ls -la recurring-buy-btc

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install AWS CLI
        run: |
          pip install awscli

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsRole
          aws-region: us-east-1

      - name: Determine latest Lambda Python runtime
        run: |
          KNOWN_RUNTIMES=("python3.8" "python3.9" "python3.10" "python3.11" "python3.12" "python3.13")
          PYTHON_VERSION=$(python --version | cut -d' ' -f2)
          PYTHON_MAJOR_MINOR=$(echo $PYTHON_VERSION | cut -d'.' -f1-2)
          GITHUB_LATEST="python${PYTHON_MAJOR_MINOR}"
          LAMBDA_RUNTIME=""
          for runtime in "${KNOWN_RUNTIMES[@]}"; do
            if [[ "$runtime" == "$GITHUB_LATEST" || "${runtime#python}" < "${GITHUB_LATEST#python}" ]]; then
              LAMBDA_RUNTIME="$runtime"
            fi
          done
          if [ -z "$LAMBDA_RUNTIME" ]; then
            LAMBDA_RUNTIME="python3.13"
          fi
          echo "Detected GitHub Actions Python version: $PYTHON_VERSION"
          echo "Selected Lambda runtime: $LAMBDA_RUNTIME"
          echo "LAMBDA_RUNTIME=$LAMBDA_RUNTIME" >> $GITHUB_ENV

      - name: Create S3 bucket
        run: |
          BUCKET_NAME="crypto-autobuy-lambdas-${{ secrets.AWS_ACCOUNT_ID }}"
          if aws s3 ls "s3://$BUCKET_NAME" 2>&1 | grep -q 'NoSuch'; then
            echo "Creating S3 bucket: $BUCKET_NAME..."
            aws s3 mb "s3://$BUCKET_NAME" --region us-east-1
          else
            echo "Bucket $BUCKET_NAME already exists."
          fi

      - name: Generate version
        run: |
          echo "VERSION=$(date +%s)" >> $GITHUB_ENV

      - name: Package Lambda functions
        run: |
          LAMBDA_DIRS=("recurring-buy-btc" "recurring-buy-eth")
          VERSION=${{ env.VERSION }}
          mkdir -p dist
          for dir in "${LAMBDA_DIRS[@]}"; do
            echo "Processing $dir..."
            if [ -d "$dir" ]; then
              cd "$dir"
              echo "Files before installation:"
              ls -la
              if [ -f "requirements.txt" ]; then
                echo "Installing dependencies from requirements.txt..."
                pip install -r requirements.txt -t .
                echo "Files after installation:"
                ls -la | grep -E "requests|__pycache__"
              else
                echo "No requirements.txt found in $dir, creating one..."
                echo -e "requests\nboto3" > requirements.txt
                pip install -r requirements.txt -t .
                echo "Files after installation:"
                ls -la | grep -E "requests|__pycache__"
              fi
              if [ ! -d "../shared" ]; then
                echo "shared directory not found at root!"
                exit 1
              fi
              echo "Zipping contents..."
              mkdir -p ../dist/$dir
              cp -r . ../dist/$dir/
              cp -r ../shared ../dist/$dir/
              cd ../dist/$dir
              zip -r ../../dist/${dir}-${VERSION}.zip .
              cd ../../
              rm -rf dist/$dir
              unzip -l "dist/${dir}-${VERSION}.zip"
              cd ..
              echo "Packaged $dir into dist/${dir}-${VERSION}.zip"
            else
              echo "Directory $dir does not exist!"
              exit 1
            fi
          done

      - name: Upload Lambda code to S3
        run: |
          BUCKET_NAME="crypto-autobuy-lambdas-${{ secrets.AWS_ACCOUNT_ID }}"
          VERSION=${{ env.VERSION }}
          for dir in recurring-buy-btc recurring-buy-eth; do
            if [ -f "dist/${dir}-${VERSION}.zip" ]; then
              aws s3 cp "dist/${dir}-${VERSION}.zip" "s3://$BUCKET_NAME/${dir}-${VERSION}.zip"
              echo "Uploaded ${dir}-${VERSION}.zip to S3"
            else
              echo "Zip file dist/${dir}-${VERSION}.zip not found!"
              exit 1
            fi
          done

      - name: Deploy CloudFormation stack
        run: |
          BUCKET_NAME="crypto-autobuy-lambdas-${{ secrets.AWS_ACCOUNT_ID }}"
          VERSION=${{ env.VERSION }}
          aws cloudformation deploy \
            --template-file template.yml \
            --stack-name CryptoAutobuyLambdasStack \
            --capabilities CAPABILITY_IAM \
            --parameter-overrides \
              CodeBucket="$BUCKET_NAME" \
              LambdaRuntime="${{ env.LAMBDA_RUNTIME }}" \
              RecurringBuyBTCCodeKey="recurring-buy-btc-${VERSION}.zip" \
              RecurringBuyETHCodeKey="recurring-buy-eth-${VERSION}.zip"